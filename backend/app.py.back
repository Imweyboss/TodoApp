from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_pymongo import PyMongo
from bson import ObjectId
from dotenv import load_dotenv
import bcrypt
import os

load_dotenv()
app = Flask(__name__)
CORS(app)
app.config["MONGO_URI"] = f"mongodb://{os.environ['MONGO_USERNAME']}:{os.environ['MONGO_PASSWORD']}@localhost:27017/todo_app_db"
mongo = PyMongo(app)

todos_collection = mongo.db.todos
users_collection = mongo.db.users

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    existing_user = users_collection.find_one({'email': data['email']})

    if existing_user:
        return jsonify({'message': 'User with this email already exists.'}), 409

    new_user = {
        'username': data['username'],
        'email': data['email'],
        'password': bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8'),
    }
    result = users_collection.insert_one(new_user)
    return jsonify({'_id': str(result.inserted_id), 'username': data['username'], 'email': data['email']}), 201

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = users_collection.find_one({'email': data['email']})
    if not user:
        return jsonify({'message': 'Email not found.'}), 401
    if bcrypt.checkpw(data['password'].encode('utf-8'), user['password'].encode('utf-8')):
        return jsonify({'user_id': str(user['_id'])})
    else:
        return jsonify({'message': 'Incorrect password.'}), 401

@app.route('/users', methods=['GET'])
def get_users():
    users = []
    for user in users_collection.find():
        users.append({'_id': str(user['_id']), 'username': user['username'], 'email': user['email']})
    return jsonify(users)

@app.route('/todos', methods=['GET'])
def get_todos():
    user_id = request.args.get('user_id')
    if user_id:
        todos = [{'_id': str(todo['_id']), 'title': todo['title'], 'completed': todo['completed']} for todo in todos_collection.find({'user_id': user_id})]
    else:
        todos = [{'_id': str(todo['_id']), 'title': todo['title'], 'completed': todo['completed']} for todo in todos_collection.find()]
    return jsonify(todos)

@app.route('/todos', methods=['POST'])
def add_todo():
    data = request.get_json()
    new_todo = {'title': data['title'], 'completed': data['completed'], 'user_id': data['user_id']}
    result = todos_collection.insert_one(new_todo)
    return jsonify({'_id': str(result.inserted_id), 'title': data['title'], 'completed': data['completed'], 'user_id': data['user_id']})

@app.route('/todos/<id>', methods=['PUT'])
def update_todo(id):
    data = request.get_json()
    todos_collection.update_one({'_id': ObjectId(id)}, {'$set': {'completed': data['completed']}})
    return jsonify({'_id': id, 'completed': data['completed']})

@app.route('/todos/<id>', methods=['DELETE'])
def delete_todo(id):
    todos_collection.delete_one({'_id': ObjectId(id)})
    return jsonify({'_id': id})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)
